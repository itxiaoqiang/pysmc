# -*- coding: utf-8 -*-
"""
GOMSMCGrid.py

Author: Qingxiang Liu
Date  : Thu Oct 15 11:59:20 2015

Note:
1) Create the SMC2510km grid for Gulf of Mexico (GOM).

2) increase the resolution around buoy 42007 to check if SMC can give a
   better result in the coastal water

3) It is proved that SMC did not improve model performance around 42007, so
   I won't use high res. around it.

4) divide the whole smc grid into 3 parts to check if using WRT is feasible.
"""
# -- m. module
import numpy as np
import scipy.io as sio
import cartopy.crs as ccrs
from datetime import datetime
import matplotlib.pyplot as plt

from HWind import Translation

#import sys; sys.path.append('/media/qliu/Zuoer_dream/mylib')
#import pyutil.SMCGrid as smc
import SMCGrid as smc

# -- 1. important parms
debug = 1
genGrid = 1
matFnm = 'gom2510.mat'
proj=ccrs.Stereographic(central_latitude=18.,central_longitude=285.,
                        true_scale_latitude=18.)

# -- fit a 2 order polynomial to define the size4_bbox
size4_bbox = np.array([(-100, 32), (-100, 5), (-45, 5), (-45, 17.5)], dtype='d')
f = np.poly1d(np.polyfit([-45, -65, -80, -85], [17.5, 20, 30, 35], deg=2))
x = np.arange(-45.1, -85, -.1)
size4_bbox = np.r_[size4_bbox, np.c_[x, f(x)]]
size4_bbox[:, 0] += 360.

# -- buoy list
buoyLoc = {'42001': {'lon': -89.66, 'lat': 25.84, 'ha':'right', 'va':'center'},
           '42003': {'lon': -85.91, 'lat': 26.01, 'ha':'left', 'va':'center'},
           '42007': {'lon': -88.77, 'lat': 30.09, 'ha':'left', 'va':'center'},
           '42036': {'lon': -84.51, 'lat': 28.51, 'ha':'left', 'va':'top'},
           '42039': {'lon': -86.06, 'lat': 28.8, 'ha':'left', 'va':'center'},
           '42040': {'lon': -88.21, 'lat': 29.18, 'ha':'left', 'va':'center'},
           '42041': {'lon': -90.46, 'lat': 27.5, 'ha':'right', 'va':'center'}}

#buoyList = []
#for key in buoyLoc:
#    # -- only refine 42007
#    if key != '42007': continue
#    buoyList.append(smc.Island(name=key, lon=buoyLoc[key]['lon']+360,
#                               lat=buoyLoc[key]['lat'], bthrd=100))

# -- 2. gen grid
gomBathy = smc.MatBathy(matFnm, debug=debug)
if genGrid:
    smc.GenSMCGrid(bathy_obj=gomBathy, size4_bbox=size4_bbox, debug=debug,)
#                   buoy_list=buoyList)

# -- Create Grid from file and plot the cells
smcFnm = 'GOM2510Cell.dat'
obsFnm = 'GOM2510Obs.dat'
gomSMC = smc.UnSMC(smcFnm, dlon=gomBathy.dlon, dlat=gomBathy.dlat, proj=proj,
                   refp=(gomBathy.zlon, gomBathy.zlat))
gomSMC.readObs(obsFnm)

# -- generate FaceArray and sort [*.d generated by Fortran 90]
smc.SortFaceArray('GOM2510ISide.d', 'GOM2510JSide.d')

# -- obstruction plot
plot_kws = dict(txtloc= (0.05, 0.28), dotsize=0.01,
                cax_kws=dict(width='35%', height='3%', borderpad=.5),
                mapext=(264, 306, 5, 33), txtSize=7)

fig, axs = smc.CartopyMap(proj, coast=True, gridbase=5., nrows=2, ncols=1,
                          figsize=(5, 7.5))
gomSMC.genPlot(filled=True, ax=axs[0], plot_var='sx', center=False, **plot_kws)
gomSMC.genPlot(filled=True, ax=axs[1], plot_var='sy', center=False, **plot_kws)
plt.tight_layout()
plt.savefig(obsFnm[:-4]+'.png')
plt.close()

# -- cell plot
fig, ax = smc.CartopyMap(proj, coast=True, gridbase=5.)
gomSMC.genPlot(filled=False, ax=ax, plot_var='depth', center=True, **plot_kws)

# 3. overlay Ivan track (size and translation speed)
_, tkLon, tkLat, tkU10, tkTsl = Translation('IvanVitalHrd.dat', plot=False)
print
print "**** Ivan track ****"
print 'u10 min, max:', np.nanmin(tkU10), np.nanmax(tkU10)
print 'translation min, max:', np.nanmin(tkTsl), np.nanmax(tkTsl)

ax.plot(tkLon, tkLat, lw=1., color='k', transform=ccrs.PlateCarree())

sizeFunc = lambda x: 10 * 1.25 ** (np.floor(x))
vkwds = dict(vmin=40, vmax=71)
im = ax.scatter(tkLon, tkLat, s=sizeFunc(tkTsl), c=tkU10,
                transform=ccrs.PlateCarree(), zorder=3,
                cmap=plt.cm.hot_r, **vkwds)

def TrackLegend():
    lu10 = np.arange(40, 70.1, 5.)
    ltsl = np.arange(1.5, 10.6, 1.5)
    lx = np.ones_like(lu10) * .85
    ly = np.linspace(0.65, 0.9, lu10.size)
    ax.scatter(lx, ly, s=sizeFunc(ltsl), c=lu10, cmap=plt.cm.hot_r,
               transform=ax.transAxes, zorder=3, **vkwds)

    kwds = dict(va='center', transform=ax.transAxes, size=7)
    for ix, iy, iu10, itsl in zip(lx, ly, lu10, ltsl):
        ax.text(ix-.025, iy, '{:2.0f} m/s'.format(iu10), ha='right', **kwds)
        ax.text(ix+.025, iy, '{:3.1f} m/s'.format(itsl), ha='left', **kwds)

    kwds['va'] = 'bottom'
    xloc, yloc = lx[0], 0.9+(ly[-1]-ly[-2]) * 1.
    ax.text(xloc-0.025, yloc, 'MSW (color)', ha='right', **kwds)
    ax.text(xloc+0.025, yloc, 'TSL (size)', ha='left', **kwds)

TrackLegend()

# 4. overlay SRA measurement locations
sraloc = sio.loadmat('SRALoc.mat', squeeze_me=True)
for key in sraloc.keys():
    if 'sep' not in key: continue
    ax.plot(sraloc[key][:, 0], sraloc[key][:, 1], lw=1., color='k',
            transform=ccrs.PlateCarree(), zorder=3)

# 5. add buoy location
for key in buoyLoc:
    x, y = buoyLoc[key]['lon'], buoyLoc[key]['lat']
    ax.plot(x, y, '^', mfc='#e31a1c', mec='none',
            transform=ccrs.PlateCarree(), ms=5, zorder=3)

    ha, va = buoyLoc[key]['ha'], buoyLoc[key]['va']
    off = .5
    if ha == 'left':
        x += off
    elif ha == 'right':
        x -= off

    if va == 'bottom':
        y += off
    elif va == 'top':
        y -= off

    if key == '42007':
        props = dict(facecolor='w', edgecolor='none',
                     pad=0, alpha=.7)
    else:
        props=None

    ax.text(x, buoyLoc[key]['lat'], key, ha=ha, va=va,
            transform=ccrs.PlateCarree(), fontsize=7, bbox=props)

#plt.savefig(smcFnm[:-4]+'.pdf')
plt.savefig(smcFnm[:-4]+'.png')
plt.show()
